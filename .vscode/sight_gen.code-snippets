{
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"DoNotCompile flag": {
		"description": "Heading comment line for flaging the file to not compile directly",
		"prefix": "flag-no-direct-compile",
		"body": [
			"// SCRIPT_DO_NOT_DIRECTLY_COMPILE"
		]
	},

	"CompileToSpecificDir flag": {
		"description": "Heading comment line for flaging the file to be compiled to given sight dir",
		"prefix": "flag-compile-to",
		"body": [
			"// SCRIPT_COMPILE_TO=${0:targetSightDir}"
		]
	},

	"Sight file initialization": {
		"description": "New sight template",
		"scope": "javascript,typescript",
		"prefix": "init-sight",
		"body": [
			"import Sight from \"${1:..}/_lib2/sight_main.js\";",
			"import Toolbox from \"${1:..}/_lib2/sight_toolbox.js\";",
			"import { Quad, Circle, Line, TextSnippet } from \"${1:..}/_lib2/sight_elements.js\";",
			"",
			"import ENV_SET from \"${2:.}/helper/env_settings.js\";",
			"import * as pd from \"${2:.}/helper/predefined.js\";",
			"import * as calc from \"${2:.}/helper/calculators.js\";",
			"import comp from \"${2:.}/components/all.js\";",
			"",
			"import rgfd from \"${2:.}/extra_modules/rangefinder.js\"",
			"import binoCali from \"${2:.}/extra_modules/binocular_calibration_2.js\"",
			"",
			"",
			"let sight = new Sight();",
			"// let horiRatioMult = new calc.HoriRatioMultCalculator(",
			"// \t16 / 9, ENV_SET.DISPLAY_RATIO_NUM",
			"// ).getMult();",
			"// let distMil = new calc.DistMilCalculator(ENV_SET.DEFAULT_ASSUMED_TARGET_WIDTH);",
			"$0",
			"",
			"// Introduction comment",
			"sight.addDescription(`${3:INTRODUCTION COMMENT}`.trim());",
			"",
			"",
			"//// BASIC SETTINGS ////",
			"// sight.addSettings(pd.concatSettings(/*TODO*/));",
			"",
			"",
			"//// VEHICLE TYPES ////",
			"// sight.matchVehicle(/*TODO*/);",
			"",
			"",
			"//// SHELL DISTANCES ////",
			"// sight.addShellDistance(/*TODO*/);",
			"",
			"",
			"//// SIGHT DESIGNS ////",
			"/*TODO*/",
			"",
			"",
			"",
			"",
			"//// OUTPUT ////",
			"export default { sightObj: sight };",
			"if (  // NodeJS/Deno main module check",
			"\t(typeof require !== \"undefined\" && require.main === module) ||",
			"\t(typeof import.meta.main !== \"undefined\" && import.meta.main === true)",
			") { sight.printCode(); }",
			"",
		]
	},

	"Sight base file initialization": {
		"description": "New sight base template",
		"scope": "javascript,typescript",
		"prefix": "init-sightbase",
		"body": [
			"// SCRIPT_DO_NOT_DIRECTLY_COMPILE",
			"",
			"import Sight from \"${1:../..}/_lib2/sight_main.js\";",
			"import Toolbox from \"${1:../..}/_lib2/sight_toolbox.js\";",
			"import { Quad, Circle, Line, TextSnippet } from \"${1:../..}/_lib2/sight_elements.js\";",
			"",
			"import ENV_SET from \"${2:..}/helper/env_settings.js\";",
			"import * as pd from \"${2:..}/helper/predefined.js\";",
			"import * as calc from \"${2:..}/helper/calculators.js\";",
			"import comp from \"${2:..}/components/all.js\";",
			"",
			"import rgfd from \"${2:..}/extra_modules/rangefinder.js\"",
			"import binoCali from \"${2:..}/extra_modules/binocular_calibration_2.js\"",
			"",
			"",
			"let sight = new Sight();",
			"// let horiRatioMult = new calc.HoriRatioMultCalculator(",
			"// \t16 / 9, ENV_SET.DISPLAY_RATIO_NUM",
			"// ).getMult();",
			"// let distMil = new calc.DistMilCalculator(ENV_SET.DEFAULT_ASSUMED_TARGET_WIDTH);",
			"$0",
			"",
			"// Introduction comment",
			"sight.addDescription(`${3:INTRODUCTION COMMENT}`.trim());",
			"",
			"",
			"//// BASIC SETTINGS ////",
			"// sight.addSettings(pd.concatSettings(/*TODO*/));",
			"",
			"",
			"//// VEHICLE TYPES ////",
			"// NOT DEFINED HERE",
			"",
			"",
			"//// SHARED SHELL DISTANCES, COMMON SIGHT DESIGNS, ETC. ////",
			"/*TODO*/",
			"",
			"",
			"//// SELECTABLE SIGHT PARTS ////",
			"let parts = {/*TODO*/}",
			"",
			"",
			"//// SHORTHAND INIT PROMPT METHOD ////",
			"let init = ({ partName1 = parts.partType1, } = {}) => {",
			"\tthrow new Error(\"Init method not implemented\");",
			"}",
			"",
			"",
			"",
			"",
			"//// OUTPUT ////",
			"export default {",
			"\tsightObj: sight,",
			"\tparts: parts,",
			"\tinit: init,",
			"};",
			"",
		]
	},

	"Sight file (using a base) initialization": {
		"description": "New sight template (using a sight base) TODO: UPDATE",
		"scope": "javascript,typescript",
		"prefix": "init-sight-usebase",
		"body": [
			"import Sight from \"${1:..}/_lib2/sight_main.js\";",
			"import Toolbox from \"${1:..}/_lib2/sight_toolbox.js\";",
			"import { Quad, Circle, Line, TextSnippet } from \"${1:..}/_lib2/sight_elements.js\";",
			"",
			"import ENV_SET from \"${2:.}/helper/env_settings.js\";",
			"import * as pd from \"${2:.}/helper/predefined.js\";",
			"import * as calc from \"${2:.}/helper/calculators.js\";",
			"import comp from \"${2:.}/components/all.js\";",
			"",
			"import rgfd from \"${2:.}/extra_modules/rangefinder.js\"",
			"import binoCali from \"${2:.}/extra_modules/binocular_calibration_2.js\"",
			"",
			"",
			"import base from \"./${0:SIGHT_BASE}.js\";",
			"let sight = base.sightObj;",
			"let parts = base.parts;",
			"// let horiRatioMult = new calc.HoriRatioMultCalculator(",
			"// \t16 / 9, ENV_SET.DISPLAY_RATIO_NUM",
			"// ).getMult();",
			"// let distMil = new calc.DistMilCalculator(ENV_SET.DEFAULT_ASSUMED_TARGET_WIDTH);",
			"",
			"",
			"//// VEHICLE TYPES ////",
			"// sight.matchVehicle(/*TODO*/)",
			"",
			"",
			"//// COMBINE SELECTIVE PARTS ////",
			"// sight.add(parts.PART_NAME_1)"
			"// Or:"
			"// base.init({ partName1: parts.partType1 });",
			"",
			"",
			"//// ADDITIONAL ELEMENTS (IF ANY) ////",
			"// sight.add(/*TODO*/);",
			"",
			"",
			"",
			"",
			"//// OUTPUT ////",
			"export default { sightObj: sight };",
			"if (  // NodeJS/Deno main module check",
			"\t(typeof require !== \"undefined\" && require.main === module) ||",
			"\t(typeof import.meta.main !== \"undefined\" && import.meta.main === true)",
			") { sight.printCode(); }",
			""
		]
	},

	"Add a new circle": {
		"prefix": "new-circle",
		"body": "new Circle({$0})"
	},

	"Add a new line": {
		"prefix": "new-line",
		"body": "new Line({from: [$1], to: [$2]})"
	},

	"Add a new text": {
		"prefix": "new-text",
		"body": "new TextSnippet({text: \"$1\", pos: [$2], size: $3})"
	}

}